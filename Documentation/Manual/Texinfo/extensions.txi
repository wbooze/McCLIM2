
@node Extensions
@chapter Extensions

@menu
* Text editor substrate::
* Fonts and Extended Text Styles::
* Tab Layout::
* Raster Images::
@end menu

@node Text editor substrate
@section Text editor substrate
@cindex drei
@cindex input-editor
@cindex text-editor
@cindex text-field

For brievity only basic topics common to all substrates are covered in
the manual. Drei documentation is provided as a separate document.

@menu
* Text field gadget::
* Text editor pane::
@end menu

@node Text field gadget
@node Text editor pane

@node Tab Layout
@section Tab Layout

The tab layout is a composite pane arranging its children so that
exactly one child is visible at any time, with a row of buttons
allowing the user to choose between them.

See also the tabdemo.lisp example code located under Examples/ in the
McCLIM distribution.  It can be started using demodemo.

@include class-clim-tab-layout-tab-layout.texi
@include class-clim-tab-layout-tab-layout-pane.texi
@include class-clim-tab-layout-tab-page.texi
@include macro-clim-tab-layout-with-tab-layout.texi

@include fun-clim-tab-layout-tab-layout-pages.texi

@include fun-clim-tab-layout-tab-page-tab-layout.texi
@include fun-clim-tab-layout-tab-page-title.texi
@include fun-clim-tab-layout-tab-page-pane.texi
@include fun-clim-tab-layout-tab-page-presentation-type.texi
@include fun-clim-tab-layout-tab-page-drawing-options.texi

@include fun-clim-tab-layout-add-page.texi
@include fun-clim-tab-layout-remove-page.texi
@include fun-clim-tab-layout-tab-layout-enabled-page.texi
@include fun-clim-tab-layout-sheet-to-page.texi
@include fun-clim-tab-layout-find-tab-page-named.texi
@include fun-clim-tab-layout-switch-to-page.texi
@include fun-clim-tab-layout-remove-page-named.texi

@include fun-clim-tab-layout-note-tab-page-changed.texi

@c com-switch-to-tab-page
@c com-remove-tab-page

@node Fonts and Extended Text Styles
@section Fonts and Extended Text Styles

@menu
* Extended Text Styles::
* Listing Fonts::
@end menu

@node Extended Text Styles
@subsection Extended Text Styles

McCLIM extends the legal values for the @cl{family} and @cl{face}
arguments to @cl{make-text-style} to include strings (in additional to
the portable keyword symbols), as permitted by the CLIM spec, section
11.1.

Each backend defines its own specific syntax for these family and face
names.

The CLX backend maps the text style family to the X font's
@emph{foundry} and @emph{family} values, separated by a dash.  The
face is mapped to @emph{weight} and @emph{slant} in the same way.  For
example, the following form creates a text style for
@emph{-misc-fixed-bold-r-*-*-18-*-*-*-*-*-*-*}:

@lisp
(make-text-style "misc-fixed" "bold-r" 18)
@end lisp

In the GTK backend, the text style family and face are used directly
as the Pango font family and face name.  Please refer to Pango
documentation for details on the syntax of face names.  Example:

@lisp
(make-text-style "Bitstream Vera Sans" "Bold Oblique" 54)
@end lisp

@node Listing Fonts
@subsection Listing Fonts

McCLIM's font listing functions allow applications to list all
available fonts available on a @class{port} and create text style
instances for them.

Example:

@lisp
* (find "Bitstream Vera Sans Mono"
        (clim-extensions:port-all-font-families (clim:find-port))
        :key #'clim-extensions:font-family-name
        :test #'equal)
#<CLIM-GTKAIRO::PANGO-FONT-FAMILY Bitstream Vera Sans Mono>

* (clim-extensions:font-family-all-faces *)
(#<CLIM-GTKAIRO::PANGO-FONT-FACE Bitstream Vera Sans Mono, Bold>
 #<CLIM-GTKAIRO::PANGO-FONT-FACE Bitstream Vera Sans Mono, Bold Oblique>
 #<CLIM-GTKAIRO::PANGO-FONT-FACE Bitstream Vera Sans Mono, Oblique>
 #<CLIM-GTKAIRO::PANGO-FONT-FACE Bitstream Vera Sans Mono, Roman>)

* (clim-extensions:font-face-scalable-p (car *))
T

* (clim-extensions:font-face-text-style (car **) 50)
#<CLIM:STANDARD-TEXT-STYLE "Bitstream Vera Sans Mono" "Bold" 50>
@end lisp

@include class-clim-extensions-font-family.texi
@include class-clim-extensions-font-face.texi

@include fun-clim-extensions-port-all-font-families.texi

@include fun-clim-extensions-font-family-name.texi
@include fun-clim-extensions-font-family-port.texi
@include fun-clim-extensions-font-family-all-faces.texi

@include fun-clim-extensions-font-face-name.texi
@include fun-clim-extensions-font-face-family.texi
@include fun-clim-extensions-font-face-all-sizes.texi
@include fun-clim-extensions-font-face-text-style.texi

@node Raster Images
@section Raster Images

This extension has the goal to provide a fast and flexible way to
display images in the screen. An image is a rectangular object and is
represented as a rectangular pattern and follows pattern
protocol. Pixel values are represented as 32-bit RGBA numbers.

collapse-pattern
make-pattern-from-bitmap-file

define-bitmap-file-reader
define-bitmap-file-writer
bitmap-format-supported-p
bitmap-output-supported-p
read-bitmap-file
write-bitmap-file

Images are read with @code{read-bitmap-file}.
Images are wrote with @code{write-bitmap-file}.

Images are created with @code{make-image}.
Images are cloned with @code{clone-image}.
Images are copied with @code{copy-image}.
Images are blended with @code{blend-image}.
Images are filled with @code{fill-image}.

Operations having source and destination image as arguments may use
the same image without copying it.

To draw an image use @code{draw-pattern*} or @code{draw-design}. Image
may be also used as an ink in other drawing functions.

@section Raster image as a medium

Raster image backend includes a medium that implements:
@itemize @bullet
@item CLIM's medium protocol,
@item CLIM's output stream protocol, and
@item CLIM's Pixmap protocol.
@end itemize

@anchor{Macro clime:with-output-to-image-stream}
@deffn {Macro} {clime:with-output-to-image-stream} (stream-var file-stream format &rest options) &body body
@findex clime:with-output-to-raster-image-stream
@end deffn

@anchor{Macro clime:with-output-to-rgba-pattern}
@deffn {Macro} {clime:with-output-to-rgba-pattern} (stream-var image &rest options) &body body
@findex clime:with-output-to-rgba-pattern
@end deffn

Within @code{body}, @code{stream-var} is bound to a stream that produces
a raster image.  This stream is suitable as a stream or medium argument
to any CLIM output utility, such as @code{draw-line*} or
@code{write-string}.

The value of @code{options} is a list consisting of alternating keyword and value
pairs.  These are the supported keywords:
@itemize @bullet
@item
  @code{:width} --- specifies the width of the image. Its default value is 1000.
@item
  @code{:height} --- specifies the height of the image. Its default value is 1000.
@end itemize

@defmac {clime:with-output-to-raster-image-stream}
An image describing the output to the @code{stream-var} stream will be
written to the stream @code{file-stream} using the format
@code{format}. @code{format} is a symbol that names the type of the
image. Valid values are @code{:png}, @code{:jpg}, @code{:jpeg},
@code{tiff}, @code{tif}, @code{gif}, @code{pbm}, @code{pgm}, and
@code{ppm}. Its default value is @code{:png}.
@end defmac

@defmac {clime:with-output-to-rgba-pattern}
An image describing the output to the @code{stream-var} stream will be
returned as an rgba pattern (of class @code{clime:image-pattern}).
@end defmac
